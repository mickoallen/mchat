/*
 * This file is generated by jOOQ.
 */
package com.mick.mchat.jooq.model.tables;


import com.mick.mchat.jooq.UUIDConverter;
import com.mick.mchat.jooq.model.Indexes;
import com.mick.mchat.jooq.model.Keys;
import com.mick.mchat.jooq.model.Mchat;
import com.mick.mchat.jooq.model.enums.MessageType;
import com.mick.mchat.jooq.model.tables.records.MessageRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = -2011024772;

    /**
     * The reference instance of <code>mchat.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>mchat.message.uuid</code>.
     */
    public final TableField<MessageRecord, UUID> UUID = createField("uuid", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDConverter());

    /**
     * The column <code>mchat.message.user_uuid</code>.
     */
    public final TableField<MessageRecord, UUID> USER_UUID = createField("user_uuid", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDConverter());

    /**
     * The column <code>mchat.message.conversation_uuid</code>.
     */
    public final TableField<MessageRecord, UUID> CONVERSATION_UUID = createField("conversation_uuid", org.jooq.impl.SQLDataType.BINARY(16).nullable(false), this, "", new UUIDConverter());

    /**
     * The column <code>mchat.message.type</code>.
     */
    public final TableField<MessageRecord, MessageType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false).defaultValue(org.jooq.impl.DSL.inline("TEXT", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.mick.mchat.jooq.model.enums.MessageType.class), this, "");

    /**
     * The column <code>mchat.message.body</code>.
     */
    public final TableField<MessageRecord, String> BODY = createField("body", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>mchat.message.date_created</code>.
     */
    public final TableField<MessageRecord, Timestamp> DATE_CREATED = createField("date_created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP(6)", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>mchat.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    /**
     * Create an aliased <code>mchat.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>mchat.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mchat.MCHAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MESSAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.KEY_MESSAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.KEY_MESSAGE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }
}
